########################################
# BEGIN of section set silent mode if needed
########################################


- id: '1676837085073'
  alias: Overshoot_found
  description: 'overshoot found - set silent mode to on'
  trigger:
  - platform: state
    entity_id:
    - sensor.te_warm
    from: 'Off'
    to: 'On'
  condition: []
  action:
  - service: switch.turn_on
    data: {}
    target:
      entity_id: switch.lg_silent_mode_set
  mode: single  
  

- id: '1676837085074'
  alias: Overshoot_done
  description: 'overshoot done - set silent mode to off'
  trigger:
  - platform: state
    entity_id:
    - sensor.te_warm
    from: 'On'
    to: 'Off'
  condition: []
  action:
  - service: switch.turn_off
    data: {}
    target:
      entity_id: switch.lg_silent_mode_set
  mode: single
  
- id: '1674378074560'
  alias: Silent_mode_na_start_wp
  description: Silent mode na start wp voor xx minuten aan
  trigger:
  - platform: state
    entity_id:
    - sensor.heat_pump_active
    from: 'Off'
    to: 'On'
  condition: []
  action:
  - service: switch.turn_on
    data: {}
    target:
      entity_id: switch.lg_silent_mode_set
  - delay:
      hours: 0
      minutes: 30
      seconds: 0
      milliseconds: 0
  - service: switch.turn_off
    data: {}
    target:
      entity_id: switch.lg_silent_mode_set
  mode: single

- id: '1674378078803'
  alias: Silent mode na defrost
  description: Silent mode na defrost voor xx minuten aan
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.defrosting_status
  condition: []
  action:
  - service: switch.turn_on
    data: {}
    target:
      entity_id: switch.lg_silent_mode_set
  - delay:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
  - service: switch.turn_off
    data: {}
    target:
      entity_id: switch.lg_silent_mode_set
  mode: single

########################################
# END of section set silent mode if needed
######################################## 
  
  

################################################################################################################## 
# (1) room temperature control using  setpoint (sp) en measured value (mv) van Toon (external device of Eneco)   #
#   - set kp to a value thast workt well in your set up. In my case I use 3 as the default value.                #
#   - derivative is expermimental. Set Kd to 0 to disable the D component                                        #
#   - reader: https://www.cds.caltech.edu/~murray/courses/cds101/fa02/caltech/astrom-ch6.pdf                     #
# (2) Start peak overshootcontrol included (set overdeheuvelhulp to true or false)                               #
# (3) limit setpoint in order to limit too aggressive powering up of the comrpessor                              #
# (4) (re)set integrator 'zero' line                                                                             #
# (5) winding up limiter integrator                                                                              #  
#                                                                                                                #
# IMPORTANT: obligatory LG RMC settings:                                                                         #
#   - AI based water temperature control (output) *If input control is wanted, change 'o' under (2) accordingly  #
#   - 'heating curve (stooklijn)  MUST be set up first. MUST be adequate for YOUR system                         #
#   - hysteresis +4  and -1.5 appears to be acceptable in my set up.                                             #
#  -  Set input_number.max_delta_t in config.yaml to same number (or same-1) as the +hysteris  in RMC            #
##################################################################################################################
- id: '1676837085075'
  alias: Temp control using Toon sensor
  description: Temp control using Toon sensor
  trigger:
  - platform: time_pattern
    minutes: /01
  condition: []
  action:
  - service: modbus.write_register
    data:
      hub: lg_modbus
      slave: 1  
      address: 4  
      value: >
        {###################### (1) controller part PI(D) #########################################}
        {# set sp = states('sensor.currentSetpoint') | float(0)  #}  
        {# set mv = states('sensor.currentTemperature') | float(0)  #}
        {% set mvminsp = states('sensor.actualtemp_vs_settemp') | float(0)  %}
        {% set epwr =  states('sensor.electrical_power') | float(0) %} 
        {% if states('input_number.integrator_center_value') != 'unavailable' %}
           {% set integrationCenterValue = states('input_number.integrator_center_value')|float(0)  %}
           {% set integrator_value_running = states('sensor.integration_actualtemper_vs_settemp')|float(0)  %}
           {% set i = integrator_value_running - integrationCenterValue     %} 
           {% set d = states('sensor.derivative_actualtemp_vs_settemp')|float(0)    %} 
        {% else  %}
            {% set i = 0 | float(0) %}
            {% set d = 0 | float(0) %}
        {% endif %}
        {% set kp = states('input_number.kp') | float(0)  %}       
        {% set ki = states('input_number.ki') | float(0)  %}    
        {% set kd = states('input_number.kd') | float(0)  %}           
        {% set outputP = (kp*mvminsp)|float(0) %} 
        {% set outputI = (ki*i)|float(0) %} 
        {% set outputD = (kd*d)|float(0) %} 
        {% set of = -1*( outputP  + outputI + outputD )| round(3) %} 
        
    
        {###################### (2) overdeheuvelhulp startpiek #########################################} 
        {# set overdeheuvelhulp to false if not wanted #}
        {% set overdeheuvelhulp = true %} 
        {% if (overdeheuvelhulp) %}
            {% set maxDeltaT = states('input_number.max_delta_t') | float(0)  %} 
               {# set o = states('sensor.water_inlet_temp')| float(0)   #}
               {% set o = states('sensor.water_outlet_temp')| float(0)   %}
               {% set t = states('sensor.target_temp_circuit1') | float(0) %}
               {% set ofactual = states('sensor.shift_value_in_auto_mode_circuit1') | float(0)  %}            
            {% if ((states('binary_sensor.compressor_status') == "on" ) and ( epwr > 0.350 ) ) %}
               {% set allowedT = (o-maxDeltaT)|float(0) %}
               {% if  t >=  allowedT   %}
                 {% set hotter = ( (ofactual-of) + 0.8*(allowedT-t)  )  | round(0) | int %} 
               {% else %}
                 {% set hotter = ( (ofactual-of) + (allowedT-t)  )  | round(0) | int %} 
               {% endif %}
               {% if  hotter < 0   %}
                   {% set hotter = 0|int %} 
               {% endif %}
            {% else %}     
               {# WP is idle #}
               {% set hotter = 0 | int  %}
            {% endif %}
            {% set newof = (of+hotter) | float(0) | round(0) | int %}   
        {% else %}
           {% set newof = of | float(0) | round(0) | int %}
        {% endif %} 
        


        {############## (3) prevention of large power steps,              #########}
        {############## by limiting  setpoint to max 1 K above water_temp #########}
        {# set largePowerStepPrevention to false if not wanted #}
        {% set largePowerStepPrevention = true %}         
        {% if largePowerStepPrevention %}
            {% set presentstooklijnT = (t - ofactual) %}
            {% if  ( (t -o) > 1 )  or ( (presentstooklijnT + newof  -o ) > 1 ) %}
               {% set limitedTarget =  ( o +1  )     %}
               {% set newof= (limitedTarget -  presentstooklijnT)|round(0)|int %}
            {% endif %}
        {% endif %}

        {#### prepare number and send new offset to LG heatpump ####}
        {# limit new offset to plus and minus 5 K #}
        {% if (newof < -5) %}   
           {% set newof = -5  %}   
        {% elif (newof > 5) %}   
           {% set newof = 5  %}   
        {% endif %}
        {# process negative numbers correctly #}         
        {% if (newof < 0) %}
            {# compute the 2s complement #} 
            {% set newof = newof + 65535 +1 %}   
        {% endif %}  
        {{ newof | int  }}
        
    ################################################################################################################################        
    #  (4) (re)set integrator 'zero' line                                                                                          #
    #  use input_number to store the raw value of the integrator to be able to virtually (re)set the zero line of the I-action     #
    #  by substracting the stored value from the raw integrator data und using the result in the PI(D) controller as the zero line #
    ################################################################################################################################        
  - service: input_number.set_value
    data_template:
      entity_id: input_number.integrator_center_value
      value: >
          {% if states('input_number.integrator_center_value') != 'unavailable' %}
            {% set integrator_value_running = states('sensor.integration_actualtemper_vs_settemp')|float(0)  %}
            {% set integrationCenterValue = states('input_number.integrator_center_value')|float(0)    %} 
            {% set iDiff=  (integrator_value_running - integrationCenterValue)|float(0) %}
            {% set iDiffmax=  5|float(0) %}
            {% if (iDiff+2*iDiffmax) < iDiffmax  %}  
              {% set integrationCenterValue = integrator_value_running + 0*iDiffmax  %} 
              {{ integrationCenterValue }}
            {% elif (iDiff-2*iDiffmax) > iDiffmax   %}
              {% set integrationCenterValue =  integrator_value_running - 0*iDiffmax %} 
              {{ integrationCenterValue }}
            {% else %}
              {% set integrationCenterValue =  integrationCenterValue  %} 
              {{ integrationCenterValue}}
            {% endif %}
          {% endif %}

    ##################################################################################################
    #  (5) capping integrator windup: limit the building up of I action to max +/- 5K.               #
    ##################################################################################################
  - service: input_number.set_value
    data_template:
      entity_id: input_number.windup_limited_diff_to_integrator
      value: >
            # {% set mvminsp = states('sensor.actualtemp_vs_settemp') | float(0)  %}
            # {% set kp = states('input_number.kp') | float(0)  %}        
            # {% set ki = states('input_number.ki') | float(0)  %}    
            # {% set kd = states('input_number.kd') | float(0)  %}
            # {% set integrationCenterValue = states('input_number.integrator_center_value')|float(0)  %}
            # {% set integrator_value_running = states('sensor.integration_actualtemper_vs_settemp')|float(0)  %}
            # {% set i = integrator_value_running - integrationCenterValue     %}
            # {% set d = states('sensor.derivative_actualtemp_vs_settemp')|float(0)    %} 
            # {% set outputP = (kp*mvminsp)|float(0) %} 
            # {% set outputI = (ki*i)|float(0) %} 
            # {% set outputD = (kd*d)|float(0) %} 
            # {% set of = -1*( outputP  + outputI + outputD )| round(3) %} 
            # {# 
            #   Note: instead of recalculating the desired offset, it should be possible to test against the value of the offset register in the LG: states('sensor.shift_value_in_auto_mode_circuit1')    
            #   so we do from 2024-01-10
            # #}
            
            {% set of = states('sensor.shift_value_in_auto_mode_circuit1') | float(0)  %} 
            {% if of|abs < 5 %}
              {{mvminsp}}
            {% else %}  
              {{ 0|float(0) }}
            {% endif %} 

    # force update of below sensors at each trigger. Needed to get proper zero values from derivative. (bypassing a bug (In my opinion) in HA )
      
  - service: homeassistant.update_entity
    target:
      entity_id: sensor.noisy_actualtemp_vs_settemp  
      
  - service: homeassistant.update_entity
    target:
      entity_id: sensor.derivative_actualtemp_vs_settemp            
            
            
  mode: restart
 
